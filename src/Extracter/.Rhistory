library(seqinr)
myseqs <- read.alignment(file = "~/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
myseqs <- read.alignment(file = "/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
which(dist==NA)
which(dist==NaN)
dist
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
dist
myseqs <- read.alignment(file = "/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
dist
dist.alignment(myseqs, matrix = "identity" )
as.matrix(dist.alignment(myseqs, matrix = "identity" ))
dist<-as.matrix(dist.alignment(myseqs, matrix = "identity" ))
dist
which(dist=NaN)
which(dist==NaN)
which(dist=='NaN')
dist.alignment(myseqs, matrix = "identity" )
dist<-na.omit(as.matrix(dist.alignment(myseqs, matrix = "identity" )))
dist
myseqs <- read.alignment(file = "/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
dist<-na.omit(as.matrix(dist.alignment(myseqs, matrix = "identity" )))
myseqs <- read.alignment(file = "/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
dist.alignment(myseqs, matrix = "identity" )
dist<-as.matrix(dist.alignment(myseqs, matrix = "identity" ))
dist
?dist.alignment
dist.alignment(myseqs, matrix = "similarity" )
myseqs <- read.alignment(file = "/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
dm <- as.matrix((dist.alignment(myseqs, matrix = "similarity" ))
dm <- as.matrix(dist.alignment(myseqs, matrix = "similarity" ))
dm
myseqs
myseqs <- read.alignment(file = "/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
dm <- as.matrix(dist.alignment(myseqs, matrix = "similarity" ))
dm
myseqs <- read.alignment(file = "/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
dm <- as.matrix(dist.alignment(myseqs, matrix = "similarity" ))
dm
dm[which(dm=='NaN')] <- 0.1
dm
library(rmetamp)
mds16S <- ComputeMDS("~/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/Reference16S_human_mock_pynast_aligned.fasta")#,mode="dist")
mds16S <- ComputeMDS("/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/Reference16S_human_mock_pynast_aligned.fasta")#,mode="dist")
library(rmetamp)
mds16S <- ComputeMDS("/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/Reference16S_human_mock_pynast_aligned.fasta")#,mode="dist")
library(rmetamp)
#=======Step 1: Read the 16S aligned reference genes (sequences)=======#
#Loading the distance matrix of ref. 16S:
mds16S <- ComputeMDS("/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/Reference16S_human_mock_pynast_aligned.fasta")#,mode="dist")
#Visualize
plot_mds(mds16S,caption="2D MDS, whole 16S",col="green")
#Read the reverences and empirical data:
data <- import.fasta("~/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta",gap.to.dash=T)
mdsV13 <- ComputeMDS("~/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta")
mdsV13 <- ComputeMDS("/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta")
library(rmetamp)
mds16S <- ComputeMDS("/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/Reference16S_human_mock_pynast_aligned.fasta")#,mode="dist")
library(rmetamp)
mds16S <- ComputeMDS("/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/Reference16S_human_mock_pynast_aligned.fasta")#,mode="dist")
#Visualize
plot_mds(mds16S,caption="2D MDS, whole 16S",col="green")
#Read the reverences and empirical data:
mdsV13 <- ComputeMDS("/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta")
library(seqinr)
data <- read.alignment(file = "/Users/ilya/bio/app/MetaAmplicon_project/00-TestData/RawData/Artificial/v13_combined_new_headers_pynast_aligned.fasta", format = "fasta")
dist <- as.matrix(dist.alignment(data, matrix = "similarity" ))
dist
dist[which(data=='NaN')] <- 0.1
dist
dist[which(dist=='NaN')] <- 0.1
dist
data <- read.table("/Users/ilya/Dropbox/coursera/algs4partI/E1/input.txt",sep=' ')
data
plot(data)
plot(x=data$V2,y=data$V1)
?curve
x<-seq(512,1048576)
x
curve(0.1*y^3,512,1048576)
curve(0.1*y^3)
curve(sin)
curve(x^3 - 3*x, -2, 2)
curve(x^3 - 3*x)
curve(0.1*x^6)
curve(1*x^6)
curve(1*x^-6)
plot(x=data$V1,y=data$V2)
lines(curve(1*x^2.23))
lines(curve(1*x^223))
curve(1*x^223)
curve(1*x^2)
curve(1*x^2,512,1048576)
lines(curve(1*x^2,512,1048576))
plot(x=data$V1,y=data$V2)
lines(curve(1*x^2,512,1048576))
lines(curve(1*x^0.2,512,1048576))
plot(x=data$V1,y=data$V2)
lines(curve(1*x^1.2,512,1048576))
lines(curve(1*x^0.7,512,1048576))
lines(curve(1*x^0.99,512,1048576))
plot(x=data$V1,y=data$V2)
lines(curve(0.01*x^2,512,1048576))
lines(curve(0.001*x^2,512,1048576))
lines(curve(0.0001*x^2,512,1048576))
lines(curve(0.000001*x^2,512,1048576))
lines(curve(0.00000001*x^2,512,1048576))
lines(curve(0.000000001*x^2,512,1048576))
lines(curve(0.000000002*x^2,512,1048576))
lines(curve(0.000000002*x^3,512,1048576))
lines(curve(0.000000002*x^4,512,1048576))
lines(curve(0.000000000002*x^4,512,1048576))
lines(curve(0.0000000000000002*x^4,512,1048576))
lines(curve(0.00000000000000000002*x^4,512,1048576))
lines(curve(0.00000000000000000000002*x^4,512,1048576))
lines(curve(0.00000000000000000000000002*x^4,512,1048576))
lines(curve(0.0000000000000000000000002*x^4,512,1048576))
lines(curve(0.000000000000000000000002*x^4,512,1048576))
lines(curve(0.00000000000000000000002*x^4,512,1048576))
lines(curve(0.0000000000000000000002*x^4,512,1048576))
lines(curve(0.000000000000000000002*x^4,512,1048576))
plot(x=data$V1,y=data$V2)
lines(curve(0.000000000000000000002*x^4,512,1048576))
lines(curve(0.000000002*x^2,512,1048576))
lines(curve(0.000000002*x^2.12,512,1048576))
lines(curve(0.0000002*x^2.12,512,1048576))
lines(curve(0.0000000002*x^2.12,512,1048576))
data
ans<-c(0)
for(i in 2:dim(data)[1]) {
ans <- c(ans,data$V2[i]/data$V2[i])
}
ans
ans<-c(0)
for(i in 2:dim(data)[1]) {
ans <- c(ans,data$V2[i-1]/data$V2[i])
}
ans
ans<-c(0)
for(i in 2:dim(data)[1]) {
ans <- c(ans,data$V2[i]/data$V2[i-1])
}
ans
mean(ans)
mean(ans[3:])
mean(ans[3:len(ans)])
mean(ans[3:length(ans)])
data <- read.table("/Users/ilya/Dropbox/coursera/algs4partI/E1/input.txt",sep=' ')
plot(x=data$V1,y=data$V2)
ans<-c(0)
for(i in 2:dim(data)[1]) {
ans <- c(ans,data$V2[i]/data$V2[i-1])
}
log(mean(ans[3:length(ans)]))
?log
data <- read.table("/Users/ilya/Dropbox/coursera/algs4partI/E1/input.txt",sep=' ')
plot(x=data$V1,y=data$V2)
ans<-c(0)
for(i in 2:dim(data)[1]) {
ans <- c(ans,data$V2[i]/data$V2[i-1])
}
log2(mean(ans[3:length(ans)]))
log2(3.41)
data <- read.table("/Users/ilya/Dropbox/coursera/algs4partI/E1/input.txt",sep=' ')
plot(x=data$V1,y=data$V2)
ans<-c(0)
for(i in 2:dim(data)[1]) {
ans <- c(ans,data$V2[i]/data$V2[i-1])
}
log2(mean(ans[length(ans)]))
data <- read.table("/Users/ilya/Dropbox/coursera/algs4partI/E1/input.txt",sep=' ')
plot(x=data$V1,y=data$V2)
ans<-c(0)
for(i in 2:dim(data)[1]) {
ans <- c(ans,data$V2[i]/data$V2[i-1])
}
log2(mean(ans[length(ans)]))
8+8+1+(8 + 4*192 + 24)
817/8
820/8
824/8
792-24
768/4
16 + 1*3 + 8*3 + 8*4 + (8 + 4*104 + 24)
523/8
524/8
526/8
528/8
data <- read.table("/Users/ilya/Dropbox/coursera/algs4partI/E1/input.txt",sep=' ')
plot(x=data$V1,y=data$V2)
ans<-c(0)
for(i in 2:dim(data)[1]) {
ans <- c(ans,data$V2[i]/data$V2[i-1])
}
log2(mean(ans[length(ans)]))
# -*- coding: utf-8 -*-
#
#MetAmp - a software application for meta-amplicon data analysis.
#Written by Ilya Y. Zhbannikov, Feb 2, 2014.
#usage:
# Edit config.R (provide your data and change settings if necessary).
# Then run R.
# Under R-environmentL $>source("main.R")
#
library(ShortRead) # For manipulations with sequences
library("BLASTParser")
ans <- BuildIdentityMatrixUSEARCH(system.file("extdata", "refSet16S_10.fasta", package="BLASTParser"), system.file("extdata", "test-10.aln", package="BLASTParser"))
library(gputools)
?gpuDist
numVectors <- 5
dimension <- 10
Vectors <- matrix(runif(numVectors*dimension), numVectors, dimension)
gpuDist(Vectors, "euclidean")
#library(ShortRead) # For manipulations with sequences
library(seqinr) # For manupulations with sequences
library(MASS) # For multidimensional scaling
library(CDHITConverter) # For translating the CD-HIT's output files into machine-readable format
library(BLASTParser) # Parses BLAST output file
library(tripack) # For triangulation
library(RANN) # For kd-tree
library(fpc) # For clustering using the DBSCAN algorithm
library(amap)
library(parallel)
dir_path <- getwd()
setwd(dir_path)
# Reading configuration file to get default parameters:
source("config.R")
source("src/denoise.R")
source("src/merge.R")
source("src/convert.R")
source("src/methods-Clust.R")
source("src/MetAmp-4.R")
source("src/dist.R")
#----Create "analysis" directory------#
analysis_path <- paste(dir_path, analysis_dir,sep='')
system(paste("mkdir", analysis_path))
##---------------------------------Denoising-------------------------------------#
#if (default_lib == "454") {
#  #Clean sequences with seqyclean
#  cat("Denoising...")
#  denoise454(denoise_app, dir_path, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, analysis_path, default_pref)
#  cat("Done denoising.")
#} else if (default_lib == "Illumina") {
#  #Merge overlapping reads with flash
#  cat("Merging overlapping reads...")
#  merge(merge_app, dir_path, analysis_dir, default_pref, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9)
#  cat("Done merging overlapping reads.")
#  #Clean the resulting reads with seqyclean
#  cat("Denoising...")
#  denoiseIllumina(denoise_app, dir_path, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, analysis_path, default_pref)
#  cat("Done denoising.")
#  #Proceed to the next stages
#}
## Run stage 2:
#cat("Converting to Fasta...")
#fastq2fasta(analysis_dir, default_pref, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9)
#cat("Done conversion.")
#cat("Adding reference sequences to empirical amplicons...")
#add_references(analysis_dir, default_pref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9)
#cat("Done adding reference sequences to empirical amplicons.")
## Run stage 3:
#cat("Clustering the reads...")
# Here the parameter -g used, from CD-HIT's documentation:
#
#  -g	1 or 0, default 0
# 	by cd-hit's default algorithm, a sequence is clustered to the first
# 	cluster that meet the threshold (fast cluster). If set to 1, the program
# 	will cluster it into the most similar cluster that meet the threshold
# 	(accurate but slow mode)
# 	but either 1 or 0 won't change the representatives of final clusters
#
# After clustering there are will be clusters that contain reference sequences ('reference' clusters) and clusters that do not ('non-reference' clusters).
# It is necessary to rename reference clusters to corresponding reference name.
#
#cat(paste("Running", cluster_app, "...") )
#cluster(analysis_dir, default_pref, l1=lib1, l2=lib2, l3=lib3)
#cat("Removing small clusters...")
#cat("Done clustering.")
#cat("Adding reference sequences to empirical amplicons...")
#add_references(analysis_dir, default_pref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9)
#cat("Done adding reference sequences to empirical amplicons.")
cat("Distance matrix for 16S...")
score16S <- generate_distance_matrix16S(ref16S)
score16S <- generate_distance_matrix16S(ref16S)
library(gputools)
x=matrix(100)
x
x=matrix(100,10,10)
x
x=matrix(runif(100),10,10)
x
ans=gpuDist(x)
a=matrix(runif(100),10,10)
dist(a)
ans=dist(a)
View(a)
Class(ans)
?ans
Object(ans)
ans[1]
ans[1,1]
ans[100]
ans[1000]
ans[40]
10.00^30+4500.00–10.00^30+10.00^33+444.00–10.00^33
10.00^30+4500.00-10.00^30+10.00^33+444.00–10.00^33
10.00^30+4500.00-10.00^30+10.00^33+444.00-10.00^33
10^30+4500-10^30+10^33+444-10^33
?image
image("~/Dropbox/Videocompression/vhdl/im_out_climb25.bmp")
read.bmp("~/Dropbox/Videocompression/vhdl/im_out_climb25.bmp")
install.packages("pixmap")
install.packages("pixmap")
library(pixmap)
read.bmp("~/Dropbox/Videocompression/vhdl/im_out_climb25.bmp")
read.pnm("~/Dropbox/Videocompression/vhdl/im_out_climb25.bmp")
pixmap("~/Dropbox/Videocompression/vhdl/im_out_climb25.bmp")
install.packages("EBImage")
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("bmp")
ans<- read.bmp("~/Dropbox/Videocompression/vhdl/im_out_climb25.bmp")
library(bmp)
ans<- read.bmp("~/Dropbox/Videocompression/vhdl/im_out_climb25.bmp")
ans
plot(ans)
dim(ans)
ans[1,]
rasterImage(ans)
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
library("EBImage")
f = system.file("images", "lena.png", package="EBImage")
lena = readImage(f)
display(lena)
ans <- readImage("~/Dropbox/Videocompression/vhdl/im_out_climb26.bmp")
ans <- readImage("~/HDL/workspace/image/plane.jpg")
display(ans)
print(ans)
?imageData
channel(ans,'rgb')
channel(ans,'rgb')
ans[23,23]
ans@.Data[23,23]
ans@.Data
ans@.Data[[1]]
ans@.Data[[1,1]]
ans@.Data[1,]
ans@.Data[[1,]]
ans@.Data[[1:2]]
ans@.Data[1:2]
ans@.Data[1:20]
ans@.Data
imageData(ans)
ans1 <- imageData(ans)
ans1[1,2,2]
ans1[1,2,]
ans1[10,20,]
ans1[41,20,]
ans1[,,1]
ans_rgb <- imageData(ans)
ans_r <- ans_rgb[,,1]
ans_g <- ans_rgb[,,2]
ans_b <- ans_rgb[,,3]
ans_b
write.matrix(ans_r, file = "~/HDL/workspace/image/plane_r.txt")
library(MASS)
write.matrix(ans_r, file = "~/HDL/workspace/image/plane_r.txt")
ans <- readImage("~/HDL/workspace/image/plane.png")
ans_rgb <- imageData(ans)
ans_r <- ans_rgb[,,1]
ans_g <- ans_rgb[,,2]
ans_b <- ans_rgb[,,3]
write.matrix(ans_r, file = "~/HDL/workspace/image/plane_r.txt")
install.packages("bmp")
library(bmp)
ans <- read.bmp("~/HDL/workspace/image/plane.bmp")
ans
ans[1,]
write.matrix(ans, file = "~/HDL/workspace/image/plane.txt")
library(png)
r <- writePNG(ans, "~/HDL/workspace/image/plane-2.png",
metadata=sessionInfo())
r <- writePNG(ans_rgb, "~/HDL/workspace/image/plane-2.png",
metadata=sessionInfo())
# Estimating Abundances From Multiple Markers #
# Testing NMDS versus MMDS
# We are interested how different results produced from NMDS to those produced from MMDS.
#
library(MASS)
#
# Step 1: generate distance matrix from default data from library MASS:
#
swiss.x <- as.matrix(swiss[, -1])
swiss.dist <- dist(swiss.x)
# Step 2: NMDS (with non-metric MDS we don't try to match the distances precisely, only to get them in a right order):
swiss.nmds <- isoMDS(swiss.dist)
plot(swiss.nmds$points, type = "n")
text(swiss.nmds$points, labels = as.character(1:nrow(swiss.x)))
# The Shepard plot shows how well the projected distances match those in the distance (dissimilarity plot):
swiss.nmds.sh <- Shepard(swiss.dist, swiss.nmds$points)
plot(swiss.nmds.sh, pch = ".")
lines(swiss.nmds.sh$x, swiss.nmds.sh$yf, type = "S")
# Step 3: MMDS:
swiss.mmds <- cmdscale(swiss.dist)
plot(swiss.mmds, type = "n")
text(swiss.mmds, labels = as.character(1:nrow(swiss.x)))
swiss.mmds.sh <- Shepard(swiss.dist, swiss.mmds)
plot(swiss.mmds.sh, pch = ".")
lines(swiss.mmds.sh$x, swiss.mmds.sh$yf, type = "S")
# Step 4: Let's calculate the difference:
diff.x <- swiss.mmds.sh$x - swiss.mmds.sh$x
sum(diff.x)
diff.y <- swiss.mmds.sh$y - swiss.mmds.sh$y
sum(diff.y)
# Now let us test on random data:
x <- matrix(rnorm(100), nrow = 50)
x.dist <- dist(x)
# NMDS:
x.nmds <- isoMDS(x.dist)
x.nmds.sh <- Shepard(x.dist, x.nmds$points)
# MMDS:
x.mmds <- cmdscale(x.dist)
x.mmds.sh <- Shepard(x.dist, x.mmds)
#
diff.x <- x.mmds.sh$x - x.mmds.sh$x
sum(diff.x)
diff.y <- x.mmds.sh$y - x.mmds.sh$y
sum(diff.y)
OTUS <- assignClusters(tmp_clusters)
cat("Done!")
cat("Computing large OTUs...\n")
largeOTUS <- computeLargeClusters(OTUS)
cat("Done!")
#=============End of analysis===============#
cat("End of analysis.\n")
getwd()
source()
source("")
source(textConnection("print('Hello, world.')"))
Sys.setenv(R_TEST="testit")
Sys.getenv("R_TEST")
Sys.getenv("PWD")
Sys.setenv(R_USER = "path")
install.packages("shiny")
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
?fileInput
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
textInput
?textInput
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
shiny::runApp('Projects/metamp/src/Extracter')
?textInput
shiny::runApp('Projects/metamp/src/Extracter')
?Sys.call
?Sys
?Sys.sleep
?sys.call
sys.call("python extract.py 16S.fasta test --fp CCTACGGGAGGCAGCAG --rp CCGTCAATTCMTTTRAGN")
?sys.call
?sys.call()
system("./extract.py 16S.fasta test --fp CCTACGGGAGGCAGCAG --rp CCGTCAATTCMTTTRAGN")
setwd("~/Projects/metamp/src/Extracter/")
system("python extract.py 16S.fasta test --fp CCTACGGGAGGCAGCAG --rp CCGTCAATTCMTTTRAGN")
